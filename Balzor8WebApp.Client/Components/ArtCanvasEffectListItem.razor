@using Balzor8WebApp.Client.Pages
<MudPaper Class="d-flex align-center align-content-center pl-4 pr-2 gap-4" Height="48px" Square="true" Elevation="0">
    <MudText>@EffectItem.Effect.Name</MudText>
    @foreach (var option in EffectItem.Effect.Options)
    {
        @if (option.InputType == ArtCanvas.CanvasEffectOptionInputType.Slider)
        {
            <MudSlider @bind-Value="option.Value" Style="width: 25%;" Min="@option.MinValue" Max="@option.MaxValue" TickMarks="true" Step="1">@option.Name</MudSlider>
        }
        @* @(option.InputType switch
        {
            ArtCanvas.CanvasEffectOptionInputType.Slider => (@<MudSlider @bind-Value="@option.Value" Style="width: 25%;" Min="@option.MinValue" Max="@option.MaxValue" TickMarks="true" Step="1">@option.Name</MudSlider>)
        }) *@
    }
    <MudSpacer />
    <MudIcon Size=Size.Small Icon="@Icons.Material.Filled.DragIndicator" Class="ml-4" @onmousedown="OnHandleMouseDown" @onmouseup="OnHandleMouseUp" Title="Drag" />
</MudPaper>

@code {
    [Parameter]
    [EditorRequired]
    public ArtCanvas.EffectItem EffectItem { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action OnDragStateChangedCallback { get; set; } = null!;

    private void OnValueChanged(ArtCanvas.CanvasEffectOption option, int newValue)
    {
        option.Value = newValue;
    }

    private void OnHandleMouseUp(MouseEventArgs _)
    {
        EffectItem.Draggable = false;
        OnDragStateChangedCallback();
    }

    private void OnHandleMouseDown(MouseEventArgs _)
    {
        EffectItem.Draggable = true;
        OnDragStateChangedCallback();
    }
}
