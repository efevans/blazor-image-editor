@page "/canvas"
@using System.Runtime.InteropServices.JavaScript
@using MudBlazor.Utilities
@inject IJSRuntime JS
@rendermode InteractiveWebAssembly

<InputFile id="@FileInputId" @ref="InputFileRef" style="display: none;" OnChange="ShowPreview" />
<MudFab HtmlTag="label"
        Color="Color.Primary"
        StartIcon="@Icons.Material.Filled.Image"
        Label="Upload Image"
        Disabled="!AssemblyIsLoaded"
        for="@FileInputId" />
@* <div @ref="DropZoneRef" class="my-2" style="min-height: 300px; background-color: palegreen; @HoverStyle" @ondragenter="OnDragEnter" @ondragover="OnDragEnter" @ondragover:preventDefault="true" @ondragleave="OnDragLeave">
</div> *@
@if (!AssemblyIsLoaded)
{
    <div class="d-flex flex-row justify-center" style="min-height: 25rem;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
} 

<div style="@(ImageIsUploaded ? "" : "display: none;")">
    <div class="d-flex flex-row gap-2 my-2">
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="HandleReset">Reset</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleSave">Save</MudButton>
    </div>
    <div class="d-flex flex-row gap-2 my-2">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleDither">Floyd-Steinberg Dither</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleOrderedDither">Ordered Dither</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleInvert">Invert</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleHalfInvert">Half Darken</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleGammaCorrection">Gamma Correction</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandlePixelate">Pixelate</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleOrderedDither">Ordered Dither</MudButton>
    </div>
    <canvas id="@CleanCanvasId" @ref="CleanCanvasRef" style="display: none;"></canvas>
    <MudStack Row="true" Style="margin-right: -20rem;" Class="flex-grow-1">
        <canvas id="@MainCanvasId" @ref="MainCanvasRef" class="flex-grow-0" style="border: 1px solid black;"></canvas>
        <MudSpacer />
        <MudDropContainer @ref="EffectsUIListRef" T="EffectItem" Items="Effects" ItemsSelector="@((item,dropzone) => true)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-0 align-start" Style="width: 30rem;">
            <ChildContent>
                <MudPaper Class="ml-4 flex-grow-1">
                    <MudList Clickable="true" Class="d-flex flex-column">
                        <MudListSubheader>Effects</MudListSubheader>
                        <MudDropZone T="EffectItem" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
                    </MudList>
                </MudPaper>
            </ChildContent>
            <ItemRenderer>
                <MudListItem Text="@context.Effect.ToString()" />
            </ItemRenderer>
        </MudDropContainer>
    </MudStack>
</div>


@code {
    private const string ClassName = "ArtCanvas";
    private const string MainCanvasId = "tutorial";
    private const string CleanCanvasId = "clean-canvas";
    private const string FileInputId = "mud-file-uploader";

    private ElementReference MainCanvasRef { get; set; }
    private ElementReference CleanCanvasRef { get; set; }
    private ElementReference DropZoneRef { get; set; }
    private InputFile? InputFileRef { get; set; }

    private bool AssemblyIsLoaded = false;
    private bool ImageIsUploaded = false;

    private string HoverStyle = String.Empty;

    private void OnDragEnter(DragEventArgs e) => HoverStyle = " border-style: solid; background-color: #00ca71;";
    private void OnDragLeave(DragEventArgs e) => HoverStyle = String.Empty;

    private MudDropContainer<EffectItem> EffectsUIListRef { get; set; } = null!;

    private void ItemUpdated(MudItemDropInfo<EffectItem> dropItem)
    {
        Effects.UpdateOrder(dropItem, item => item.Order);
        Effects.Sort((e1, e2) => e1.Order > e2.Order ? 1 : -1);
        ResetImage(MainCanvasId, CleanCanvasId);
        ApplyEffects();
    }

    private List<EffectItem> Effects = new();

    private class EffectItem
    {
        public Effect Effect { get; init; }
        public int Order { get; set; }
    }

    private enum Effect
    {
        Dither,
        Invert,
        HalfInvert,
        GammaCorrect,
        Pixelate,
        OrderedDither
    }

    private readonly Dictionary<Effect, Action<string>> EffectOperations = new()
    {
        { Effect.Dither, ArtCanvas.ApplyDither },
        { Effect.Invert, ArtCanvas.ApplyInvert },
        { Effect.HalfInvert, ArtCanvas.ApplyHalfInvert },
        { Effect.GammaCorrect, ArtCanvas.ApplyGammaCorrection },
        { Effect.Pixelate, ArtCanvas.ApplyPixelate },
        { Effect.OrderedDither, ArtCanvas.ApplyOrderedDither },
    };

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync(ClassName,
                $"../Pages/{ClassName}.razor.js");

            Log("I'm logging from interop!");
            AssemblyIsLoaded = true;
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (OperatingSystem.IsBrowser())
    //     {
    //         if (firstRender)
    //         {
    //             var _module = await JS.InvokeAsync<IJSObjectReference>("import", $"../Pages/{ClassName}.razor.js");
    //             await _module.InvokeVoidAsync("initializeFileDropZone", DropZoneRef, InputFileRef!.Element);
    //         }
    //     }
    // }

    private async Task OnFileDropped(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("console.log", "file dropped");
    }

    private async Task ShowPreview()
    {
        Log("File Uploaded");
        ImageIsUploaded = true;
        await JS.InvokeVoidAsync("previewImage", InputFileRef!.Element, MainCanvasRef, CleanCanvasRef);
    }

    private void HandleSave()
    {
        Log("Save File");
        SaveImage(MainCanvasId);
    }

    private void HandleReset()
    {
        Log("File Reset");
        Effects.Clear();
        ResetImage(MainCanvasId, CleanCanvasId);
        EffectsUIListRef.Refresh();
    }

    private void ApplyEffect(Effect effect)
    {
        EffectOperations[effect](MainCanvasId);
    }

    private void ApplyEffects()
    {
        foreach (var effect in Effects)
        {
            ApplyEffect(effect.Effect);
        }
    }

    private void AddEffect(Effect effect, bool apply = true)
    {
        Effects.Add(new EffectItem { Effect = effect, Order = Effects.Count });
        EffectsUIListRef.Refresh();

        if (apply)
        {
            ApplyEffect(effect);
        }
    }

    private void HandleDither()
    {
        Log("ApplyDither");
        AddEffect(Effect.Dither);
    }

    private void HandleInvert()
    {
        Log("ApplyInvert");
        AddEffect(Effect.Invert);
    }

    private void HandleHalfInvert()
    {
        Log("ApplyHalfInvert");
        AddEffect(Effect.HalfInvert);
    }

    private void HandleGammaCorrection()
    {
        Log("ApplyGammaCorrection");
        AddEffect(Effect.GammaCorrect);
    }

    private void HandlePixelate()
    {
        Log("ApplyPixelate");
        AddEffect(Effect.Pixelate);
    }

    private void HandleOrderedDither()
    {
        Log("ApplyOrderedDither");
        AddEffect(Effect.OrderedDither);
    }
}