@page "/canvas"
@using System.Runtime.InteropServices.JavaScript
@rendermode InteractiveWebAssembly

<h3 id="canvas-title">Canvas</h3>
@* <input id="input-file" type="file" accept="image/*" /> *@
<MudFileUpload id="@FileInputId" Disabled="!IsAssemblyLoaded" T="IBrowserFile" FilesChanged="HandleFileUploaded" Accept="image/*" MaximumFileCount="1">
    <ButtonTemplate>
        <MudFab HtmlTag="label"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Image"
                Label="Upload Image"
                for="@FileInputId" />
    </ButtonTemplate>
</MudFileUpload>
<div class="d-flex flex-row gap-2 my-2">
    <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="HandleReset">Reset</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleSave">Save</MudButton>
</div>
<div class="d-flex flex-row gap-2 my-2">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleDither">Dither</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleInvert">Invert</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleHalfInvert">Half Darken</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleGammaCorrection">Gamma Correction</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandlePixelate">Pixelate</MudButton>
</div>
<canvas id="@CanvasId" style="border: 1px solid black"></canvas>
<canvas id="@CleanCanvasId" style="display: none;"></canvas>

@code {
    private const string ClassName = "ArtCanvas";
    private const string CanvasId = "tutorial";
    private const string CleanCanvasId = "clean-canvas";
    private const string FileInputId = "mud-file-uploader";

    private bool IsAssemblyLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync(ClassName,
                $"../Pages/{ClassName}.razor.js");

            Log("I'm logging from interop!");
            IsAssemblyLoaded = true;
        }
    }

    private void HandleFileUploaded(IBrowserFile _)
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("File Uploaded");
            UploadImage(FileInputId, CanvasId, CleanCanvasId);
        }
    }

    private void HandleSave()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("Save File");
            SaveImage(CanvasId);
        }
    }

    private void HandleReset()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("File Reset");
            ResetImage(CanvasId, CleanCanvasId);
        }
    }

    private void HandleDither()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyDither");
            ApplyDither(CanvasId);
        }
    }

    private void HandleInvert()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyInvert");
            ApplyInvert(CanvasId);
        }
    }

    private void HandleHalfInvert()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyHalfInvert");
            ApplyHalfInvert(CanvasId);
        }
    }

    private void HandleGammaCorrection()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyGammaCorrection");
            ApplyGammaCorrection(CanvasId);
        }
    }

    private void HandlePixelate()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyPixelate");
            Log("ApplyPixelate");
            ApplyPixelate(CanvasId);
        }
    }
}