@page "/canvas"
@using System.Runtime.InteropServices.JavaScript
@rendermode InteractiveWebAssembly

<h3 id="canvas-title">Image Edit</h3>
<MudFileUpload id="@FileInputId" Disabled="!AssemblyIsLoaded" T="IBrowserFile" FilesChanged="HandleFileUploaded" Accept="image/*" MaximumFileCount="1">
    <ButtonTemplate>
        <MudFab HtmlTag="label"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Image"
                Label="Upload Image"
                for="@FileInputId" />
    </ButtonTemplate>
</MudFileUpload>
@if(!AssemblyIsLoaded)
{
    <div class="d-flex flex-row justify-center" style="min-height: 25rem;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (ImageIsUploaded)
{
    <div class="d-flex flex-row gap-2 my-2">
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="HandleReset">Reset</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleSave">Save</MudButton>
    </div>
    <div class="d-flex flex-row gap-2 my-2">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleDither">Dither</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleInvert">Invert</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleHalfInvert">Half Darken</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleGammaCorrection">Gamma Correction</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandlePixelate">Pixelate</MudButton>
    </div>
    <canvas id="@MainCanvasId" style="border: 1px solid black"></canvas>
    <canvas id="@CleanCanvasId" style="display: none;"></canvas>
}

@code {
    private const string ClassName = "ArtCanvas";
    private const string MainCanvasId = "tutorial";
    private const string CleanCanvasId = "clean-canvas";
    private const string FileInputId = "mud-file-uploader";

    private bool AssemblyIsLoaded = false;
    private bool ImageIsUploaded = false;

    enum Effect
    {
        Dither,
        Invert,
        HalfInvert,
        GammaCorrect,
        Pixelate
    }

    private readonly Dictionary<Effect, Action<string>> EffectOperations = new()
    {
        { Effect.Dither, ArtCanvas.ApplyDither },
        { Effect.Invert, ArtCanvas.ApplyInvert },
        { Effect.HalfInvert, ArtCanvas.ApplyHalfInvert },
        { Effect.GammaCorrect, ArtCanvas.ApplyGammaCorrection },
        { Effect.Pixelate, ArtCanvas.ApplyPixelate },
    };

    List<Effect> Effects = new List<Effect>();

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync(ClassName,
                $"../Pages/{ClassName}.razor.js");

            Log("I'm logging from interop!");
            AssemblyIsLoaded = true;
        }
    }

    private void HandleFileUploaded(IBrowserFile _)
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("File Uploaded");
            ImageIsUploaded = true;
            UploadImage(FileInputId, MainCanvasId, CleanCanvasId);
        }
    }

    private void HandleSave()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("Save File");
            SaveImage(MainCanvasId);
        }
    }

    private void HandleReset()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("File Reset");
            Effects.Clear();
            ResetImage(MainCanvasId, CleanCanvasId);
        }
    }

    private void ApplyEffect(Effect effect)
    {
        EffectOperations[effect](MainCanvasId);
    }

    private void ApplyEffects()
    {
        foreach (var effect in Effects)
        {
            EffectOperations[effect](MainCanvasId);
        }
    }

    private void HandleDither()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyDither");
            Effects.Add(Effect.Dither);
            ApplyEffect(Effect.Dither);
        }
    }

    private void HandleInvert()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyInvert");
            Effects.Add(Effect.Invert);
            ApplyEffect(Effect.Invert);
        }
    }

    private void HandleHalfInvert()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyHalfInvert");
            Effects.Add(Effect.HalfInvert);
            ApplyEffect(Effect.HalfInvert);
        }
    }

    private void HandleGammaCorrection()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyGammaCorrection");
            Effects.Add(Effect.GammaCorrect);
            ApplyEffect(Effect.GammaCorrect);
        }
    }

    private void HandlePixelate()
    {
        if (OperatingSystem.IsBrowser())
        {
            Log("ApplyPixelate");
            Effects.Add(Effect.Pixelate);
            ApplyEffect(Effect.Pixelate);
        }
    }
}