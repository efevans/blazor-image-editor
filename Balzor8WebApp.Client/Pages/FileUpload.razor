@page "/upload"
@inject IJSRuntime JS
@rendermode InteractiveWebAssembly

<h3>FileUpload</h3>

@if (!AssemblyLoaded)
{
    <div class="d-flex flex-row justify-center" style="min-height: 25rem;">
        <MudProgressCircular Color="MudColor.Primary" Indeterminate="true" />
    </div>
}
else
{
    <InputFile OnChange="LoadFiles" multiple />

    <canvas id="@MainCanvasId" @ref="MainCanvasRef" class="flex-grow-0" style="border: 1px solid black;"></canvas>
}

@code {
    private bool AssemblyLoaded = false;

    private const long maxFileSize = 1024 * 1024 * 10;
    private const string MainCanvasId = "tutorial";

    private ElementReference MainCanvasRef { get; set; }

    private Lazy<IJSObjectReference> JSModule = new();

    private byte[] _cleanImageBytes;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var streamRef = new DotNetStreamReference(e.File.OpenReadStream(e.File.Size));
        await JSModule.Value.InvokeVoidAsync("setImage", streamRef, MainCanvasRef);
        // await Task.Delay(150);
        var dimensions = await JSModule.Value.InvokeAsync<CanvasDimensions>("getDimensions", MainCanvasRef);
        Console.WriteLine(dimensions.Height);
        var bytes = GetBytes(MainCanvasId);
        _cleanImageBytes = bytes.ToArray();
        for (int i = 0; i < bytes.Length / 100; i += 4)
        {
            bytes[i + 0] = (byte)(255 - bytes[i + 0]);
            bytes[i + 1] = (byte)(255 - bytes[i + 1]);
            bytes[i + 2] = (byte)(255 - bytes[i + 2]);
        }
        SetBytes(MainCanvasId, bytes);
        SetBytes(MainCanvasId, _cleanImageBytes);
        // SetBytes(MainCanvasId, bytes);
    }

    public class CanvasDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync("FileUpload",
                    $"../Pages/FileUpload.razor.js");

            JSModule = new(await JS.InvokeAsync<IJSObjectReference>("import", $"../Pages/FileUpload.razor.js"));
            AssemblyLoaded = true;
        }
    }
}